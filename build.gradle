import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
	id 'net.darkhax.curseforgegradle' version '1.+'
	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName ="$archives_base_name-$modloader_name-$minecraft_version"
version = "v$project.mod_version"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 16
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

def releaseType  = "release" // can also be `beta` or `alpha`

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "EYY4PWCG"
	versionNumber = mod_version
	versionType = releaseType
	uploadFile = remapJar
	gameVersions = [minecraft_version]
	loaders = [modloader_name.toLowerCase()]
	changelog = new File('./CHANGELOG.md').text
	dependencies {
		required.project "fabric-api"
	}
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
	apiToken = System.getenv('CURSE_FORGE_TOKEN')
	def mainFile = upload(289658, remapJar)
	mainFile.releaseType = releaseType
	mainFile.changelog = new File('./CHANGELOG.md').text
	mainFile.changelogType = 'markdown'
	mainFile.addRequirement('fabric-api')
}

configure(publishCurseForge) {
	group = 'Publishing'
	description = 'Upload project to CurseForge'
}

tasks.register('publishModSites'){
	publishCurseForge
	modrinth
}

configure(publishModSites) {
	group = 'Publishing'
	description = 'Upload project to CurseForge and Modrinth'
}
